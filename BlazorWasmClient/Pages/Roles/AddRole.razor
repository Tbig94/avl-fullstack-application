@page "/roles/add-role"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BlazorWasmClient.Services;
@using BlazorWasmClient.Models.ViewModels;
@inject IRoleService RoleService
@inject IPermissionService PermissionService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

<PageTitle>Add Role</PageTitle>
<div style="max-width: 400px; margin: auto; margin-top: 50px;">
    <MudCard Elevation="8">
        <MudText Typo="Typo.subtitle2" Align="Align.Center" style="font-size: 30px; padding-top: 20px;">Add new Role</MudText>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="name"
                              T="string"
                              Label="Name"
                              Required="true"
                              RequiredError="Name name is required!" />
                <MudTextField @bind-Value="description"
                              T="string"
                              Label="Description"
                              Required="true"
                              RequiredError="Description is required!" />
                <MudField style="margin-top: 20px;" Label="Permissions" Variant="Variant.Outlined" InnerPadding="false">
                    @* @onchange="eventArgs => { LoggingStuff(eventArgs.Value); }" *@
                    @*@foreach (var item in permissionNamesFromDb)
                    {
                        <MudCheckBox T="bool"
                                     Class="ml-n2"
                                     Label=@item
                                     @onchange="eventArgs => Console.WriteLine("IN FOREACH") />
                    }*@
                </MudField>
            </MudForm>
        </MudCardContent>
        <MudCardActions style="padding-bottom: 30px;">
            <MudButton Variant="Variant.Filled" OnClick="NavigateBack">Back</MudButton>
            <MudFab Color="Color.Secondary"
                    Icon="@Icons.Material.Filled.Add"
                    Size="Size.Small"
                    IconSize="Size.Small"
                    Label="Add"
                    OnClick="SubmitRole"
                    Disabled="@(!success)"
                    Class="ml-auto">
            </MudFab>
        </MudCardActions>
    </MudCard>
</div>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private string name = "";
    private string description = "";
    private bool active = true;
    private List<string> permissions = new List<string>();

    private List<PermissionReadMode> permissionsFromDb = new List<PermissionReadMode>();
    private List<string> permissionNamesFromDb = new List<string>();
    string checkboxClickedName;

    public List<string> permissionNamesFromCheckbox = new List<string>();

    private string permissionList = "";


    public void LoggingStuff(object eventArgs)
    {
        Console.WriteLine($"eventArgs: {eventArgs}");
    }

    /*
    public void CheckboxClicked(string checkboxClickedName, object checkedValue)
    {
        Console.WriteLine($"checkboxClickedName: {checkboxClickedName}");
        if ((bool)checkedValue)
        {
            if (!permissionNamesFromCheckbox.Contains(checkboxClickedName))
            {
                permissionNamesFromCheckbox.Add(checkboxClickedName);
            }
        }
        else
        {
            if (permissionNamesFromCheckbox.Contains(checkboxClickedName))
            {
                permissionNamesFromCheckbox.Remove(checkboxClickedName);
            }
        }
    }
    */
    
    protected override async Task OnInitializedAsync()
    {
        permissionList = await LocalStorageService.GetItem<string>("userPermissions");
        if (!permissionList.Contains("write-role"))
        {
            NavManager.NavigateTo("/roles");
        }
    }

    public async Task SubmitRole()
    {
        permissions.Add("read-user");
        permissions.Add("write-user");
        permissions.Add("delete-user");
        RoleWriteVM role = new RoleWriteVM() { Name = name, Description = description, Active = active, Permissions = permissions };
        //RoleWriteVM role = new RoleWriteVM() { Name = name, Description = description, Active = active, Permissions = permissionNamesFromCheckbox };

        await RoleService.AddRole(role);
        NavManager.NavigateTo("/roles/");
    }

    public void NavigateBack()
    {
        NavManager.NavigateTo("/roles");
    }
}
