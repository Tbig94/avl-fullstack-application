@page "/roles/add-role"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BlazorWasmClient.Services;
@using BlazorWasmClient.Models.ViewModels;
@inject IRoleService RoleService
@inject IPermissionService PermissionService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavManager

<PageTitle>Add Role</PageTitle>
<div style="max-width: 400px; margin: auto; margin-top: 50px;">
    <MudCard Elevation="8">
        <MudText Typo="Typo.subtitle2" Align="Align.Center" style="font-size: 30px; padding-top: 20px;">Add new Role</MudText>
        <MudCardContent>
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField @bind-Value="name"
                              T="string"
                              Label="Name"
                              Required="true"
                              RequiredError="Name name is required!" />
                <MudTextField @bind-Value="description"
                              T="string"
                              Label="Description"
                              Required="true"
                              RequiredError="Description is required!" />
                <MudField style="margin-top: 20px;" Label="Permissions" Variant="Variant.Outlined" InnerPadding="false">
                    @foreach (var item in basePermissionNames)
                    {
                        <input class="custom-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxClicked(item, eventArgs.Value); }" />
                        @item
                        @*<MudCheckBox T="bool"
                                     Class="ml-n2"
                                     Label=@item
                                     Color="Color.Primary"
                                     CheckedChanged="eventArgs => { CheckboxClicked(item, eventArgs.Value); }" />*@
                    }
                </MudField>
            </MudForm>
        </MudCardContent>
        <MudCardActions style="padding-bottom: 30px;">
            <MudButton Variant="Variant.Filled" OnClick="NavigateBack">Back</MudButton>
            <MudFab Color="Color.Secondary"
                    Icon="@Icons.Material.Filled.Add"
                    Size="Size.Small"
                    IconSize="Size.Small"
                    Label="Add"
                    OnClick="SubmitRole"
                    Disabled="@(!success)"
                    Class="ml-auto">
            </MudFab>
        </MudCardActions>
    </MudCard>
</div>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    private string name = "";
    private string description = "";
    private bool active = true;
    private List<string> basePermissionNames = new List<string>{
        "read-user",
        "write-user",
        "delete-user",
        "read-role",
        "write-role",
        "delete-role"
    };
    private string userPermissions = "";
    public List<string> permissionListFromCheckbox = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        userPermissions = await LocalStorageService.GetItem<string>("userPermissions");
        if (!userPermissions.Contains("write-role"))
        {
            NavManager.NavigateTo("/roles");
            return;
        }
    }

    public async Task SubmitRole()
    {
        RoleWriteVM role = new RoleWriteVM() { Name = name, Description = description, Active = active, Permissions = permissionListFromCheckbox };
        await RoleService.AddRole(role);

        NavManager.NavigateTo("/roles/");
        return;
    }

    public void NavigateBack()
    {
        NavManager.NavigateTo("/roles");
    }

    void CheckboxClicked(string permissionEl, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!permissionListFromCheckbox.Contains(permissionEl))
            {
                permissionListFromCheckbox.Add(permissionEl);
            }
        }
        else
        {
            if (permissionListFromCheckbox.Contains(permissionEl))
            {
                permissionListFromCheckbox.Remove(permissionEl);
            }
        }
    }
}
